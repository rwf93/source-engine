#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'shaderapidx11'

def options(opt):
	# stub
	return

def configure(conf):
	conf.env.append_unique('DEFINES',[
		'SHADERAPIDX11',
		'SHADERAPI_DX11', # Defines supported shader library for public/
		'SHADER_DLL_EXPORT',
		'strncpy=use_Q_strncpy_instead',
		'_snprintf=use_Q_snprintf_instead',
	])



def build(bld):
	source = [
		'../../public/filesystem_helpers.cpp',
		'../../public/tier0/memoverride.cpp',
		'../shaderapidx9/cvballoctracker.cpp',
        '../shaderapidx9/shaderdevicebase.cpp',
        '../shaderapidx9/shaderapibase.cpp',
        '../shaderapidx9/meshbase.cpp',
        'vertexshaderdx11.cpp',
        'ShaderDeviceDx11.cpp',
        'ShaderAPIDx11.cpp',
        'MeshDx11.cpp',
        'InputLayoutDx11.cpp',
        'ShaderShadowDx11.cpp',
        'TextureDx11.cpp',
        'IndexBufferDx11.cpp',
        'VertexBufferDx11.cpp',
        'ShaderConstantBufferDx11.cpp',
		'../shaderapidx9/HardwareConfig.cpp'
	]

	includes = [
		'.',
		'../',
		'../shaderapidx9',
		'../../public',
		'../../public/tier0',
		'../../public/tier1',
		'../../common'
	] + bld.env.INCLUDES_SDL2

	defines = []

	libs = [
		'tier0',
		'tier1',
		'tier2',
		'vstdlib',
		'togl',
		'bitmap',
		'mathlib',
		'bzip2'
    ]

	if bld.env.DEST_OS == 'win32':
		libs += [
			'D3D11',
			'USER32',
			'DXGI',
			'DXGUID',
			'D3DCOMPILER'
		]

	install_path = bld.env.LIBDIR

	bld.shlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

