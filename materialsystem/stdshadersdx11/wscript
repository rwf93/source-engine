#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'stdshader_dx11'

def options(opt):
	# stub
	return

def configure(conf):
	conf.env.append_unique('DEFINES',[
		'STDSHADER_DX9_DLL_EXPORT',
		'FAST_MATERIALVAR_ACCESS'
	])

def build(bld):
	stdshader_dx11_40 = [
		'bik_vs40.fxc',
		'bik_ps40.fxc',
		'unlitgeneric_vs40.fxc',
		'unlitgeneric_ps40.fxc',
		'white_ps40.fxc',
		'writez_vs40.fxc',
		'modulate_ps40.fxc',
		'modulate_vs40.fxc',
		'splinecard_vs40.fxc',
		'spritecard_vs40.fxc',
		'spritecard_ps40.fxc',
		'sprite_ps40.fxc',
		'sprite_vs40.fxc',
		'sky_vs40.fxc',
		'sky_ps40.fxc',
		'sky_hdr_compressed_rgbs_ps40.fxc',
		'sky_hdr_compressed_ps40.fxc',
		'decalmodulate_ps40.fxc',
		'vertexlit_and_unlit_generic_vs40.fxc',
		'vertexlit_and_unlit_generic_ps40.fxc',
		'depthtodestalpha_vs40.fxc',
		'depthtodestalpha_ps40.fxc',
		'wireframe_ps40.fxc',
		'wireframe_vs40.fxc',
		'lightmappedgeneric_ps40.fxc',
		'lightmappedgeneric_vs40.fxc',
	]
	bld(
		source = stdshader_dx11_40,
		target = 'stdshader_dx11_40',
		features = 'fxc',
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

	source = [
		'BaseVSShader.cpp' ,
		'bik_dx11.cpp',
		'modulate_dx11.cpp',
		'occlusion_dx11.cpp',
		'test_dx11.cpp',
		'unlitgeneric_dx11.cpp',
		'wireframe_dx11.cpp',
		'writez_dx11.cpp',
		'../shader_dll_verify.cpp',
	]

	includes = [
		'.',
		'../../public',
		'../../public/tier0',
		'../../public/tier1',
		'fxctmp9',
		'vshtmp9'
	] + bld.env.INCLUDES_SDL2

	defines = [
		'SHADERLIB_DX11'
	]

	libs = [
		'tier0',
		'tier1',
		'mathlib',
		'shaderlib_dx11'
	]

	if bld.env.DEST_OS == 'android':
		libs += ['ANDROID_SUPPORT']

	install_path = bld.env.LIBDIR

	bld.shlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

