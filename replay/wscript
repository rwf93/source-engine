#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'replay'

def options(opt):
    # stub
    return

def configure(conf):
    return

def build(bld):
    source = [
        'common/replay.cpp',
		'common/replaylib.cpp',
		'common/basereplayserializeable.cpp',
		'common/performance.cpp',
		'common/replaytime.cpp',
		'common/replayutils.cpp',
		'common/screenshot.cpp',
        'baserecordingsession.cpp',
        'baserecordingsessionblock.cpp',
        'baserecordingsessionblockmanager.cpp',
        'baserecordingsessionmanager.cpp',
        'basethinker.cpp',
        'compression.cpp',
        'errorsystem.cpp',
        '../common/netmessages.cpp',
        'replay_dbg.cpp',
        'replaysystem.cpp',
        'sessioninfoheader.cpp',
        'shared_cvars.cpp',
        'shared_replaycontext.cpp',
        'spew.cpp',
        'sv_basejob.cpp',
        'sv_commands.cpp',
        'sv_filepublish.cpp',
        'sv_fileservercleanup.cpp',
        'sv_cvars.cpp',
        'sv_publishtest.cpp',
        'sv_recordingsession.cpp',
        'sv_recordingsessionblock.cpp',
        'sv_recordingsessionmanager.cpp',
        'sv_recordingsessionblockmanager.cpp',
        'sv_replaycontext.cpp',
        'sv_sessionblockpublisher.cpp',
        'sv_sessioninfopublisher.cpp',
        'sv_sessionpublishmanager.cpp',
        'sv_sessionrecorder.cpp',
        'thinkmanager.cpp',
        '../public/tier0/memoverride.cpp'
    ]

    includes = [
        '.',
        '../',
        '../public',
        '../public/tier1',
        '../public/tier0',
        '../common',
        '../common/replay'
    ]

    defines = [
        'REPLAY_DLL',
        'REPLAY_ENABLED'
    ]

    libs = [
        'tier0',
        'tier1',
        'tier2',
        'vtf',
        'bitmap',
        'mathlib',
        'vstdlib',
        'bzip2',
        'ZLIB'
    ]

    if not bld.env.DEDICATED:
        source += [
            'cl_commands.cpp',
            'cl_cvars.cpp',
            'cl_downloader.cpp',
            'cl_recordingsession.cpp',
            'cl_recordingsessionblock.cpp',
            'cl_recordingsessionblockmanager.cpp',
            'cl_recordingsessionmanager.cpp',
            'cl_renderqueue.cpp',
            'cl_replaycontext.cpp',
            'cl_replaymanager.cpp',
            'cl_replaymovie.cpp',
            'cl_replaymoviemanager.cpp',
            'cl_performancecontroller.cpp',
            'cl_performancemanager.cpp',
            'cl_screenshotmanager.cpp',
            'cl_sessionblockdownloader.cpp',
            'cl_sessioninfodownloader.cpp',
            '../common/imageutils.cpp',
            'managertest.cpp',
            'replay_reconstructor.cpp'
        ]
        libs += [
            'JPEG',
            'PNG',
        ]
    else:
        defines += ['DEDICATED', 'SWDS']

    if bld.env.DEST_OS == 'win32':
        libs += ['USER32', 'WS2_32', 'WINMM', 'GDI32']
        defines += ['CURL_STATICLIB']

    if bld.env.DEST_OS == 'linux':
        libs += ['CURL']

    install_path = bld.env.LIBDIR

    bld.shlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

