#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'bsppack'

def options(opt):
	# stub
	return

def configure(conf):
	conf.define('CFLAGS', conf.env.CFLAGS)
	conf.define('LDFLAGS', conf.env.LINKFLAGS)

def build(bld):
	source = [
		'bsppack.cpp',
		'../common/bsplib.cpp',
		'../common/cmdlib.cpp',
		'../common/scriplib.cpp',
		'../common/filesystem_tools.cpp',
		'../../public/filesystem_init.cpp',
		'../../public/filesystem_helpers.cpp',
		'../../public/lumpfiles.cpp',
		'../../public/zip_utils.cpp',
		'../../public/tier0/memoverride.cpp'
	]

	includes = [
		'.',
		'../common',
		'../vmpi',
		'../../public',
		'../../public/tier0',
		'../../public/tier1',
		'../../common'
	]

	defines = [
		'BSPPACK_EXPORTS',
		'ZIP_SUPPORT_LZMA_ENCODE',
		'_USRDLL'
    ]

	libs = [
		'mathlib',
		'tier1',
		'tier2',
		'vstdlib',
		'bsplib',
		'lzma',
		'filesystem',
		'ZLIB'
    ]

	if bld.env.DEST_OS == 'win32':
		libs += ['USER32', 'WS2_32', 'GDI32']

	install_path = bld.env.LIBDIR

	bld.shlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

