#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'vrad_dll'

def options(opt):
	# stub
	return

def configure(conf):
	# stub
	return

def build(bld):
	source = [
        '../../public/BSPTreeData.cpp',
		'../../public/disp_common.cpp',
		'../../public/disp_powerinfo.cpp',
		'disp_vrad.cpp',
		'imagepacker.cpp',
		'incremental.cpp',
		'leaf_ambient_lighting.cpp',
		'lightmap.cpp',
		'../../public/loadcmdline.cpp',
		'../../public/lumpfiles.cpp',
		'macro_texture.cpp',
		'../common/mpi_stats.cpp',
		'mpivrad.cpp',
		'../common/MySqlDatabase.cpp',
		'../common/pacifier.cpp',
		'../common/physdll.cpp',
		'radial.cpp',
		'SampleHash.cpp',
		'trace.cpp',
		'../common/utilmatlib.cpp',
		'vismat.cpp',
		'../common/vmpi_tools_shared.cpp',
		'vrad.cpp',
		'VRAD_DispColl.cpp',
		'VradDetailProps.cpp',
		'VRadDisps.cpp',
		'vraddll.cpp',
		'VRadStaticProps.cpp',
		'../../public/zip_utils.cpp',
		'../common/bsplib.cpp',
		'../../public/builddisp.cpp',
		'../../public/ChunkFile.cpp',
		'../common/cmdlib.cpp',
		'../../public/DispColl_Common.cpp',
		'../common/map_shared.cpp',
		'../common/polylib.cpp',
		'../common/scriplib.cpp',
		'../common/threads.cpp',
		'../common/tools_minidump.cpp',
		'../../public/CollisionUtils.cpp',
		'../../public/filesystem_helpers.cpp',
		'../../public/ScratchPad3D.cpp',
		'../../public/ScratchPadUtils.cpp',
		'../../public/tier0/memoverride.cpp'
	]

	includes = [
		'.',
		'../common',
		'../vmpi',
		'../../public',
		'../../public/tier0',
		'../../public/tier1',
		'../../common'
	]

	defines = [
		'VRAD'
    ]

	libs = [
        'bitmap',
		'mathlib',
		'raytrace',
		'tier1',
		'tier2',
		'vmpi',
		'vtf',
		'lzma',
		'vstdlib',
    ]

	if bld.env.DEST_OS == 'win32':
		libs += ['USER32', 'WS2_32', 'GDI32']

	install_path = bld.env.LIBDIR

	bld.shlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

